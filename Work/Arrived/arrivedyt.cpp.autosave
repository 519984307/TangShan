#include "arrivedyt.h"
#include "Configure/configure.h"

#include <QSettings>
#include <QSqlError>
#include <QSqlQuery>
#include <QJsonObject>
#include <QJsonDocument>
#include <QJsonArray>
#include <QTextCodec>
#include <QDateTime>
#include <QFile>

ArrivedYt::ArrivedYt(QObject *parent) : QObject(parent)
{
    getConfigure();

    readUserCodeUserName();

    createDbConnection();

    createSocketConnection();

    getSignature();
}

QString ArrivedYt::createDbConnection()
{  
    db = QSqlDatabase::addDatabase("QMYSQL");
    db.setHostName(Configure::instance()->nativeip());
    db.setUserName(Configure::instance()->nativeuserName());
    db.setPassword(Configure::instance()->nativepassword());
    db.setConnectOptions("MYSQL_OPT_RECONNECT=1");
    if (db.open())
        return "本地数据库连接成功";
    else
        return db.lastError().text();
}

void ArrivedYt::timerEvent(QTimerEvent */*event*/)
{
    getData();
//    QByteArray str("00001157{\"isFirstTransfer\":\"1\",\"aviType\":\"0\",\"opRecords\":\"\",\"opRecordsOffLine\":\"\",\"respcode\":\"\",\"mty\":\"0140\",\"response\":\"\",\"trace\":\"0\",\"opRecord\":{\"type\":\"0\",\"line\":\"2\",\"repairCode\":\"\",\"pdaNo\":\"\",\"ioType\":\"01\",\"id\":\"\",\"opCode\":\"170\",\"waybillNo\":\"CQ12345678\",\"expType\":\"40\",\"pkgQty\":\"0.0\",\"feeFlag\":\"0\",\"feeAmt\":\"\",\"orgCode\":\"210901\",\"lineNo\":\"\",\"frequencyNo\":\"FC10090101\",\"vehiclePlateNo\":\"\",\"sourceOrgCode\":\"210901\",\"desOrgCode\":\"\",\"previousOrgCode\":\"\",\"nextOrgCode\":\"210901\",\"containerNo\":\"\",\"expressContentCode\":\"\",\"effectiveTypeCode\":\"T004\",\"transportTypeCode\":\"\",\"weighWeight\":\"0.0\",\"inputWeight\":\"0.0\",\"pkgLength\":\"0.0\",\"pkgWidth\":\"0.0\",\"pkgHeight\":\"0.0\",\"volumeWeight\":\"0.0\",\"uploadTime\":\"\",\"auxOpCode\":\"NEW\",\"routeCode\":\"0\",\"auxRouteCode\":\"\",\"status\":\"\",\"transferStatus\":\"\",\"createTime\":\"2017-09-20 01:10:22.192\",\"createUserCode\":\"00000089\",\"createUserName\":\"陈永平\",\"createOrgCode\":\"210901\",\"createTerminal\":\"AutoSortLine002\",\"deviceType\":\"PDA\",\"remark\":\"10020007\",\"refId\":\"\",\"modifyTime\":\"\",\"modifyUserCode\":\"\",\"modifyUserName\":\"\",\"modifyOrgCode\":\"\",\"modifyTerminal\":\"\",\"uploadStatu\":\"\",\"getStatus\":\"\",\"resMessage\":\"\",\"needArrTruck\":\"\",\"deStationNo\":\"\"}}\r\n");
//    sendMessage(str);
}

void ArrivedYt::getSignature()
{
    QSettings conf("configure.ini", QSettings::IniFormat);
    QString userName = conf.value("SIGNATURE/userName").toString();
    QString password = conf.value("SIGNATURE/password").toString();
    QString clientMac = conf.value("SIGNATURE/clientMac").toString();
    QString clientIp = conf.value("SIGNATURE/clientIp").toString();
    QString cameraMac = conf.value("SIGNATURE/cameraMac").toString();
    QString ip = conf.value("YTSERVER/ip").toString();
    quint16 port = static_cast<quint16>(conf.value("YTSERVER/port").toUInt());
    qDebug() << "签名参数" << "userName" << userName << "password" << password
             << "clientMac" << clientMac << "clientIp" << clientIp
             << "cameraMac" << cameraMac << "ip" << ip << "port" << port << "\r\n";

    //组装json
    QJsonObject obj;
    obj.insert("mty", "0140");
    obj.insert("clientMac", clientMac); //00-50-56-C0-00-01
    obj.insert("clientIp", clientIp); //172.31.76.101
    obj.insert("devType", "1");
    obj.insert("userName", userName);
    obj.insert("password", password);
    obj.insert("cameraMac", cameraMac); //macViewer1
    obj.insert("clientId", "1");
    obj.insert("extend1", "");
    obj.insert("extend2", "");
    obj.insert("extend3", "");
    QByteArray json = QJsonDocument(obj).toJson(QJsonDocument::Compact) + "\r\n";
    int length = json.length() - 2; //json长度
    QByteArray str = (QString("%1").arg(length, 8, 10, QLatin1Char('0')) + json).toLatin1();
    qDebug() << "请求签名消息：" << qPrintable(str) << "\r\n";
    //socket请求和获取
    QTcpSocket *socket = new QTcpSocket(this);
    socket->connectToHost(ip, port);
    socket->waitForConnected();
    socket->write(str);
    socket->flush();
    socket->waitForReadyRead();
    QByteArray result = socket->readAll();
    QTextCodec *codec = QTextCodec::codecForName("GBK");
    QString strUnicode = codec->toUnicode(result);
    qDebug() << "签名返回消息strUnicode" << strUnicode << "\r\n";
    //解析获取
    QByteArray resultHandle = result.remove(0, 8).trimmed();
    QTextCodec *codecResult = QTextCodec::codecForName("GBK");
    QString resultHandleUnicode = codecResult->toUnicode(resultHandle);
    qDebug() << "截取后的字符串："<< resultHandleUnicode;
    QJsonDocument doc = QJsonDocument::fromJson(resultHandleUnicode.toUtf8());
    QJsonObject dataObj = doc["data"].toObject();
    qDebug() << "dataObj" << dataObj;
    signature = dataObj["signature"].toString();
    qDebug() << "signature" << signature << "\r\n";
}

void ArrivedYt::getConfigure()
{
    QSettings conf("configure.ini", QSettings::IniFormat);
    conf.setIniCodec(QTextCodec::codecForName("UTF-8")); //读取中文
    tableName = conf.value("MYSQL/tableName").toString();

    userName = conf.value("SIGNATURE/userName").toString();
    password = conf.value("SIGNATURE/password").toString();

    createOrgCode = conf.value("YT/createOrgCode").toString();
    createTerminal = conf.value("YT/createTerminal").toString();
    createUserCode = conf.value("YT/createUserCode").toString();
    createUserName = conf.value("YT/createUserName").toString();

    effectiveTypeCode = conf.value("YT/effectiveTypeCode").toString();
    expType = conf.value("YT/expType").toString();
    expressContentCode = conf.value("YT/expressContentCode").toString();
    feeFlag = conf.value("YT/feeFlag").toString();
    frequencyNo = conf.value("YT/frequencyNo").toString();

    nextOrgCode = conf.value("YT/nextOrgCode").toString();
    orgCode = conf.value("YT/orgCode").toString();
    previousOrgCode = conf.value("YT/previousOrgCode").toString();
    sourceOrgCode = conf.value("YT/sourceOrgCode").toString();

    opCode = conf.value("YT/opCode").toString();
    line = conf.value("YT/line").toString();
    remark = conf.value("YT/remark").toString();

    qDebug() << "tableName" << tableName << "userName" << userName
             << "password" << password << "createOrgCode" << createOrgCode
             << "createTerminal" << createTerminal
             << "createUserCode" << createUserCode << "createUserName" << createUserName
             << "effectiveTypeCode" << effectiveTypeCode
             << "expType" << expType << "expressContentCode" << expressContentCode
             << "feeFlag" << feeFlag << "frequencyNo" << frequencyNo
             << "nextOrgCode" << nextOrgCode << "orgCode" << orgCode
             << "previousOrgCode" << previousOrgCode << "sourceOrgCode" << sourceOrgCode
             << "opCode" << opCode << "line" << line
             << "remark" << remark << "\r\n";
}

QByteArray ArrivedYt::createOpRecord(QJsonObject opRecord)
{
    QJsonObject obj;
    obj.insert("aviType", "0"); //航空在线离线标识-传默认值0
    obj.insert("trace", "0"); //流水号-传默认值0
    obj.insert("isFirstTransfer", "1"); //实物类型-传默认值1
    obj.insert("mty", "0140"); //PDA接口识别码:建车签时统一使用0140（备注：可能需要一天一变）
    obj.insert("signature", signature); //数字签名-调用设备登录返回签名接口获取数字签名
    obj.insert("opRecord", opRecord); //

    //非必填
    obj.insert("opRecords","");
    obj.insert("opRecordsOffLine","");
    obj.insert("respcode","");
    obj.insert("response","");

    QJsonDocument doc(obj);
    return doc.toJson(QJsonDocument::Compact);
}

QByteArray ArrivedYt::createMessage(QByteArray opRecord)
{
    QTextCodec *gbk = QTextCodec::codecForName("GBK");
    QByteArray opRecordGBK = gbk->fromUnicode(QString(opRecord).unicode());
    //QString length = QString("%1").arg(opRecordGBK.length());
    //QByteArray lengthGBK = gbk->fromUnicode(length.unicode());
    QString message = QString("%1%2\r\n").arg(opRecordGBK.length(), 8, 10, QChar('0')).arg(QString(opRecord));
    QByteArray messageGBK = gbk->fromUnicode(message.unicode());
    return messageGBK;
}

void ArrivedYt::getData()
{
    QString sql = QString("SELECT * FROM %1 WHERE isArrived IS NULL AND Company = 'yto'").arg(tableName);
    qDebug() << sql << "\r\n";
    QSqlQuery query(sql);
    QJsonObject obj;
    QString expressIds;
    if (query.size() <= 0) {
        return;
    }
    ui->textEdit->append(sql);
    while (query.next()) {
        QString expressId = query.value("EXPRESSFLOW_ID").toString();
        QString createTime = query.value("CREATE_TIME").toString()+".000";
        QString nextOrgCode = query.value("DEST_ORG").toString();
        QString boxId = query.value("Box_Num").toString();
        obj = createJsonObject(expressId, createTime, nextOrgCode, boxId);
        //创建消息实体
        QByteArray message = createMessage(createOpRecord(obj));
        //发送消息
        sendMessage(message);
        expressIds += '\'' + expressId + "',";
    }

    //更新标志位
    expressIds.chop(1); //去掉最后一位的逗号
    QString update = QString("UPDATE %1 SET isArrived = 1 WHERE EXPRESSFLOW_ID IN(%2)").arg(tableName).arg(expressIds);
    ui->textEdit->append(update);
    qDebug() << update << "\r\n";
    QSqlQuery queryUpdate(update);
    QString str = QString("更新标志条数：%1").arg(queryUpdate.numRowsAffected());
    ui->textEdit->append(str);
    qDebug() << str << "\r\n";
}

QJsonObject ArrivedYt::createJsonObject(QString waybillNo, QString createTime, QString nextOrgCode, QString boxId)
{
    QJsonObject obj;
    obj.insert("auxOpCode", "NEW"); //三个状态：NEW UPDATE DELETE
    obj.insert("createOrgCode", createOrgCode); //操作网点
    obj.insert("createTerminal", createTerminal); //服务器IP
    obj.insert("createTime", createTime); //服务器IP
    obj.insert("createUserCode", userCodeUserNameHash[boxId].first); //操作员编码
    obj.insert("createUserName", userCodeUserNameHash[boxId].second); //操作员姓名
    obj.insert("deviceType", "PDA"); //标记的是所用的设备是PDA还是PC端（备注：统一PDA）
    obj.insert("effectiveTypeCode", effectiveTypeCode); //T001：早航班(次日下午达)T002：晚航班(次晨达)T003：正常航班T004：汽运T005：第三方运输T006：标准T007：同城当天T008:区域当天
    obj.insert("expType", expType); //实物类型-10:运单20:包签30:笼签40:车签
    obj.insert("expressContentCode", expressContentCode); //判断重量0.15以下为文件DOC，0.15以上是PKG
    obj.insert("feeFlag", feeFlag); //计费标识-0：无效1：有效8：有效--已冻结9：有效--已完成，结算完成
    obj.insert("frequencyNo", frequencyNo); //频次收入1.FC100901012.FC100901023.FC100901034.FC100901095.FC100901106.FC100901507.FC10090151
    obj.insert("waybillNo", waybillNo); //运单号-存放车签
    obj.insert("ioType", "01"); //收发类型-存放车签
    obj.insert("nextOrgCode", nextOrgCode); //下一网点（拆包地）
    obj.insert("orgCode", orgCode); //操作网点-当前操作网点
    obj.insert("previousOrgCode", previousOrgCode); //上一网点
    obj.insert("remark", remark); //备注-建车签统一默认传值：“10020007”,建包统一默认传值：“10010001”
    obj.insert("sourceOrgCode", sourceOrgCode); //始发网点-当前操作网点
    obj.insert("weighWeight", "0.0"); //称入重KG
    obj.insert("pkgWidth", "0.0"); // 宽
    obj.insert("inputWeight", "0.0"); //输入重
    obj.insert("pkgLength", "0.0"); //长
    obj.insert("pkgHeight", "0.0"); //高
    obj.insert("volumeWeight", "0.0"); //体积重
    obj.insert("opCode", opCode); //操作码-识别各个扫描模块的编码（车签是：170）
    obj.insert("pkgQty", "0"); //包裹数量-扫车签号时默认赋值0，扫运单号的时候赋值1
    obj.insert("routeCode", "0"); //路由检查代码
    obj.insert("type", "0"); //类型-（自动化分拣）标注是否是补码，0为不补码，1补码
    obj.insert("line", line); //自动分拣线-（自动化分拣）场地流水线(1或2)

//    //非必填
//    {
        obj.insert("auxRouteCode", ""); //路由检查辅助代码
    //对于运单号小车，必填
        obj.insert("containerNo", ui->editCheQian->text().trimmed()); //容器号"CQ12345678"
        obj.insert("desOrgCode", ""); //拆包地在运单号之前输入，先输入包签号后输入拆包地
        obj.insert("feeAmt", ""); //计费金额
        obj.insert("id", ""); //对应数据库id号
        obj.insert("lineNo", ""); //路由线路编码
        obj.insert("modifyOrgCode", ""); //发生数据修改的操作网点
        obj.insert("modifyTerminal", ""); //发生数据修改修改的终端
        obj.insert("modifyTime", ""); //发生数据修改的实际时间yyyy-MM-dd
        obj.insert("modifyUserCode", ""); //发生数据修改的用户编码，例如：00003529（侯建国：此为静安操作网点员工，只可在静安网点使用）
        obj.insert("modifyUserName", ""); //发生数据修改的用户编码，例如：侯建国（侯建国：此为静安操作网点员工，只可在静安网点使用）
        obj.insert("uploadStatu", ""); //更新状态
        obj.insert("getStatus", ""); //状态
        obj.insert("resMessage", ""); //返回消息
        obj.insert("deStationNo", ""); //目的代号
        obj.insert("vehiclePlateNo", ""); //vehiclePlateNo
        obj.insert("uploadTime", ""); //上传时间
        obj.insert("transferStatus", ""); //1：汽转航:0：航转汽，主要用汽航转换等操作，揽收可不予理会
        obj.insert("status", ""); //状态
        obj.insert("refId", ""); //关联id
        obj.insert("opRecords", ""); //记录服务端实体类
        obj.insert("opRecordsOffLine", ""); //离线操作记录-基本上不会用到，可为null
        obj.insert("respcode", ""); //响应记录
        obj.insert("response", ""); //响应请求
        obj.insert("repairCode", ""); //目的网点
        obj.insert("pdaNo", ""); //Pda号
        obj.insert("transportTypeCode", ""); //车签下车没有
        //运单号小车必填
        obj.insert("needArrTruck", "1"); //需要到车
//    }

    return obj;
}
//中国

void ArrivedYt::sendMessage(QByteArray message)
{
    socket->write(message);
    QTextCodec *codec = QTextCodec::codecForName("GBK"); //
    QString message1 = codec->toUnicode(message);
    ui->textEdit->append("发送到件消息：" + message1);
    qDebug() << "发送到件消息：" << message1 << "\r\n";

//    socket->flush();
//    socket->waitForReadyRead();
//    QByteArray result = socket->readAll();

//    QString strUnicode = codec->toUnicode(result);
//    qDebug() << "返回到件消息：" << strUnicode << "\r\n";
//    ui->textEdit->append(strUnicode);
}

void ArrivedYt::readUserCodeUserName()
{
    QTextCodec *codec = QTextCodec::codecForName("GBK");
    QFile file("userCodeTypes.csv");
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text)) {
        QMessageBox::critical(this, "读取扫描员",
                QString("读取扫描员信息失败: %1.")
                .arg(file.errorString()));
        close();
        exit(-1);
    }
    userCodeUserNameHash.clear();
    while (!file.atEnd()) {
        QByteArray line = file.readLine();
        QPair<QString, QString> pair(line.split(',')[1].trimmed(),
                codec->toUnicode(line.split(',')[2].trimmed()));
        userCodeUserNameHash.insert(line.split(',')[0].trimmed(), pair);
    }
    qDebug() << "userCodeTypes哈希表："<< userCodeUserNameHash << "\r\n";
}

void ArrivedYt::readSocket()
{
    QTcpSocket *socket1 = qobject_cast<QTcpSocket *>(sender());
    QByteArray result = socket1->readAll();
    QTextCodec *codec = QTextCodec::codecForName("GBK");
    QString strUnicode = codec->toUnicode(result);
    qDebug() << "返回到件消息：" << strUnicode << "\r\n";
    ui->textEdit->append("返回到件消息：" + strUnicode);
}

void ArrivedYt::socektSuccess()
{
    ui->labelYTServer->setText("<font color=green>圆通服务器连接成功！</font>");
    errorLabel = false;
    qDebug() << "圆通服务器连接成功！" << "\r\n";
}

void ArrivedYt::socketError()
{
    ui->textEdit->setText("<font color=red>" + socket->errorString() + "</font>");
    qDebug() << "圆通服务器连接失败：" +  socket->errorString() << "\r\n";
    if (errorLabel) {
        ui->labelYTServer->setText("<font color=red>" + socket->errorString() + "</font>");
    }
}

static int timerIdentifier = 0; //定时器标识符
void ArrivedYt::on_buttonStart_clicked()
{
    QSettings conf("configure.ini", QSettings::IniFormat);
    int intervalArrived = conf.value("MYSQL/intervalArrived").toInt();
    timerIdentifier = startTimer(intervalArrived);
    if (timerIdentifier) {
        ui->labelRun->setText("<font color=green>正在运行</font>");
    }
}

void ArrivedYt::on_buttonStop_clicked()
{
    if (timerIdentifier != 0) {
        killTimer(timerIdentifier);
        ui->labelRun->setText("<font color=red>停止运行</font>");
    }
}

void ArrivedYt::createSocketConnection()
{
    QSettings conf("configure.ini", QSettings::IniFormat);
    QString ip = conf.value("YTSERVER/ip").toString();
    quint16 port = static_cast<quint16>(conf.value("YTSERVER/port").toUInt());

    socket = new QTcpSocket(this);
    connect(socket, &QTcpSocket::disconnected, this, &MainWindow::autoConnection);
    connect(socket, SIGNAL(readyRead()), this, SLOT(readSocket()));
    connect(socket, SIGNAL(connected()), this, SLOT(socektSuccess()));
    connect(socket, SIGNAL(error(QAbstractSocket::SocketError)), this, SLOT(socketError()));
    socket->setSocketOption(QAbstractSocket::KeepAliveOption, 1);
    socket->connectToHost(ip, port);
}

void ArrivedYt::autoConnection()
{
    errorLabel = true;
    QSettings conf("configure.ini", QSettings::IniFormat);
    QString ip = conf.value("YTSERVER/ip").toString();
    quint16 port = static_cast<quint16>(conf.value("YTSERVER/port").toUInt());
    socket->connectToHost(ip, port);
    ui->labelYTServer->setText("<font color=blue>连接断开，正在自动连接...</font>");
    qDebug() << "连接断开，正在自动连接..." << "\r\n";
}

